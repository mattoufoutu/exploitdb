#!/usr/bin/env python
# -*- coding: utf-8 -*-
########################################################
##                                                    ##
## exploitdb.py - Search exploits from exploit-db.com ##
##                                                    ##
########################################################

__app__ = 'exploitdb'
__author__ = 'Mathieu D. (MatToufoutu)'
__date__ = '2013-11-27'
__license__ = 'FreeBSD'

import cmd
import csv
import os
import re
import shutil
import tarfile
from urllib import urlretrieve

CURRENT_DIR = os.path.realpath(os.path.dirname(__file__))
EXPLOITS_DIR = os.path.join(CURRENT_DIR, 'exploits')
EXPLOITS_CSV = os.path.join(EXPLOITS_DIR, 'files.csv')
ARCHIVE_URL = "http://www.exploit-db.com/archive.tar.bz2"
CLI_PROMPT = '\033[1;31mexploitdb\033[0m\033[1;32m>\033[0m '
CLI_INTRO = (
    '\n \033[40m\033[1;37m'
    '-=[ exploitdb.py - Search exploits from exploit-db.com ]='
    '-\033[0m\n'
)
DB_FIELDS = ('id', 'file', 'description', 'date', 'author', 'platform', 'type', 'port')


class ExploitSearch(cmd.Cmd):
    prompt = CLI_PROMPT
    intro = CLI_INTRO
    fields = DB_FIELDS
    unquoted_search_re = re.compile(r'(\w+):([^ \'"]+)')
    quoted_search_re = re.compile(r'(\w+):(?:\'|")([^"\']+)')
    highlighted_fields_map = {
        'id': ['id'],
        'description': ['description'],
        'file': ['type', 'platform']
    }

    def __init__(self, csv_file=EXPLOITS_CSV):
        self.csv_file = csv_file
        self.exploits = []
        self.load_csv()
        cmd.Cmd.__init__(self)

    def parse_args(self, args):
        search_args = {}
        if ':' not in args:
            search_args['description'] = args
        else:
            for regex in (self.unquoted_search_re, self.quoted_search_re):
                result = regex.findall(args)
                if result is not None:
                    search_args.update(result)
        return search_args

    def load_csv(self):
        if not os.path.exists(self.csv_file):
            print "Database not found, updating now!\n"
            self.updatedb()
        with open(self.csv_file) as infile:
            reader = csv.reader(infile)
            header = reader.next()
            for entry in reader:
                exploit = dict(zip(header, entry))
                if exploit['port'] == '0':
                    exploit['port'] = 'N/A'
                self.exploits.append(exploit)

    def search(self, search_params):
        matches = []
        args = self.parse_args(search_params)
        for exploit in self.exploits:
            matching = True
            for field_name, pattern in args.iteritems():
                if pattern.lower() not in exploit[field_name].lower():
                    matching = False
                    break
            if matching:
                matches.append((exploit, args))
        return matches

    def do_search(self, line):
        """
        search - search database for exploits
        Usage: search field:pattern [field:pattern, ...]
        """
        results = self.search(line)
        for result, args in results:
            for field_name, search_vals in self.highlighted_fields_map.iteritems():
                for search_val in search_vals:
                    if search_val in args:
                        pattern = args[search_val]
                        result[field_name] = re.sub(
                            re.escape(pattern),
                            lambda matchobj: '\033[1;33m' + matchobj.group(0) + '\033[0m',
                            result[field_name],
                            flags=re.IGNORECASE
                        )
            result_str = "[%s] %s - %s" % (result['id'], result['description'], result['file'])
            print result_str
        print ''

    def complete_search(self, text, line, begidx, endidx):
        if not text:
            return [f+':' for f in self.fields]
        else:
            return [f+':' for f in self.fields if f.startswith(text)]

    def info(self, exploit_id):
        for exploit in self.exploits:
            if exploit['id'] == exploit_id:
                return exploit
        return None

    def do_info(self, line):
        """
        info - get details about given exploit
        Usage: info exploit_id
        """
        result = self.info(line)
        if result is None:
            print "No exploit with this ID: %s\n" % line
            return
        desc_len = len(result['description'])
        fstring = "{:-<13} | {:-<%d}" % (desc_len+2)
        print ("{:=^%d}" % (desc_len+18)).format(' #%s ' % result['id'])
        print fstring.format('Filename ', result['file']+' ')
        print fstring.format('Description ', result['description']+' ')
        print fstring.format('Date ', result['date']+' ')
        print fstring.format('Author ', result['author']+' ')
        print fstring.format('Platform ', result['platform']+' ')
        print fstring.format('Type ', result['type']+' ')
        print fstring.format('Port ', result['port']+' ')
        print (desc_len+18)*'='+'\n'

    def complete_info(self, text, line, begidx, endidx):
        if not text:
            return [e['id'] for e in self.exploits]
        else:
            return [e['id'] for e in self.exploits if e['id'].startswith(text)]

    def updatedb(self):
        print "Downloading latest exploits archive..."
        filename, headers = urlretrieve(ARCHIVE_URL)
        print "Extracting files..."
        if os.path.exists(EXPLOITS_DIR):
            shutil.rmtree(EXPLOITS_DIR)
            os.mkdir(EXPLOITS_DIR)
        with tarfile.open(filename, 'r:bz2') as infile:
            infile.extractall(path=EXPLOITS_DIR)
        os.remove(filename)
        os.chmod(EXPLOITS_CSV, 0644)
        self.exploits = []
        self.load_csv()
        print "OK\n"

    def do_updatedb(self, line):
        """
        updatedb - update local exploits database
        Usage: updatedb
        """
        self.updatedb()

    def do_EOF(self, line):
        return True


def main(restarted=False):
    es = ExploitSearch()
    if restarted:
        es.intro = '\n'
    try:
        es.cmdloop()
    except KeyboardInterrupt:
        main(True)


if __name__ == '__main__':
    main()
